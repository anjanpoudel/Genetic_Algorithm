import java.util.ArrayList;
import java.util.Random;
// import System.nanoTime;

class Game
{
	private static double mutation_rate =  0.27;
	private static double avg_deviation = 11.0;
	private static int number_of_tournaments;
	private static double prob_winner = 0.58;
	private static int candidate_mates;

	public static double[] wi = {0.03512919290180922,-0.03597239958198103,0.031909814992439604,-0.02348947567791232,-0.0013919845020498216,-0.017745931767399404,-0.040169920421368244,0.03509730463796937,-0.034241707036565754,0.0074045181635884715,-0.025455634329325016,-0.016789308214738397,0.034335895351538075,0.029887475720804454,-8.864400014317352,-0.028724885037505574,0.04609264065750659,-0.010414224959245788,-5.081175306149628E-6,0.03246762799523702,-0.04408699520296354,-0.05293339493387894,0.011032170436776585,-0.0071678991718680035,-0.048145603162296366,0.007043033304931962,0.05890621949291915,-0.03471606243174028,-0.09154059259156763,0.002606559536442415,0.05159663090488966,-0.03358838493074594,-0.004229541758674728,-0.006435027451467271,0.01188735777019125,-0.01177625197695784,0.019732977794371657,0.01455287411287342,-0.022489752562326396,-0.04436765455380638,0.021459703172457354,0.042521228712082575,-0.03144307385646176,-0.019107942532636788,-2.4605807438571624E-4,-0.006619269447360318,0.018811681559025222,-0.0240967631742992,0.023227021546463184,-0.01194240188240438,-0.026692732178974922,0.00577060132707397,-0.023594932972151636,0.015135446507596854,-4.772180404906126,0.053057217566609034,0.060911589728061086,0.0049759982161118425,0.004170893992436561,0.027937218592741914,0.03461725336281574,0.026058600098954082,0.020686853751058453,-0.07097505812589562,-0.004066538630020101,-0.035561789075494316,-0.04510402748246107,-0.027216148801494592,0.04141613269051913,0.024152528912630585,-0.013191100751936814,0.007169901111018051,-5.665590069498065E-4,0.05472774330777261,-0.022653090021659654,-0.04237812859788212,0.03593375462119613,0.019621752299870652,-23.191991559826842,0.01792123874875539,-0.007658588799773618,-0.002296455861353257,0.03697956261868281,0.00652722225555294,-0.009981943575383964,-0.012960167166370147,-0.007050143162530546,-0.012628266918396035,0.0367247308414962,0.0543957719089992,0.02550083040854255,0.01570717662960421,-0.04397728186440678,0.001913920183976207,0.033136543809221694,0.037193148127582926,0.018263728063786285,0.06932664823607015,-0.030932295105826693,-0.017751042246729427,0.006783866891927921,0.04523503955551866,0.032838407818647705,5.923885095657184E-4,-0.051678132836324275,0.018777128546680177,0.02349887239934552,-0.02731667485240376,-0.01718310688456878,-0.033191289714075756,-0.00771103934443321,-0.06640788152189289,0.0372337901233683,-0.029377541825579792,0.038837772721686904,-0.004857989627596593,0.021685080625084525,-0.009463967882532313,-0.023929741704359825,-0.009650772986377754,0.019887290278432616,-0.004309572189210103,0.061193124416107275,-0.029614191458415675,-0.056882569723996045,-8.393379041169488E-4,-0.03285297799156688,0.006387647614102127,0.041203114234793656,0.022372035369711656,0.014228481374437791,-0.006231396567855613,-0.07123067684303054,-0.04166412607404057,0.0018848781483653424,0.030186686312684157,-0.01807791031640454,-6.6802522117794725,-0.03658177220948263,-0.026766319145140768,0.01658329977614994,0.043322210022652026,-0.03899431473372095,-0.019777629555542194,0.015638684531930593,0.0583228115758539,0.021880400818566365,-0.009323234196219289,0.026000044753951835,-0.0046883764623601235,0.03478078097895967,-0.031242725067999223,0.05491324157922549,0.024450145803610074,0.027293079673111963,0.016200863698514072,0.029759338839027778,-0.04628486003840066,0.03206066514555101,0.03219196461145418,-0.01771167837356779,11.77102231914748,-0.044913665707918236,0.013099732229340017,0.019984034187950226,-0.035691687832678856,0.037079854399189593,0.017233900052747907,-0.01415818496658872,0.00728194043069703,-0.04040617850680806,-0.010970450508821911,0.020519595882332115,0.021527177141436864,0.004770359034781157,0.027079461764844277,0.018119072524094434,-0.0010782902909646918,-0.006260551774137847,0.02942026746117936,0.022411372598223383,0.07062156811466355,-0.006034229129469771,0.007229252566289669,-0.010062861374646908,0.05890781607832142,0.02402542131999873,0.0144001558209241,0.042529611618744696,0.04177773294745686,0.05195738673686832,0.009346964183636553,0.020019150840432473,-0.06105393912280258,0.021593675565820352,-0.03766099588899038,0.005825890300916607,0.01904662509925979,-0.042532112666457865,0.01401595896046711,-0.015178774487666349,-0.041199098962467894,-0.03891709943108821,-0.02852009334572423,0.01445136277015527,-0.01982462659667858,-0.02492176859621136,-0.004049173102055349,0.024947093015790102,-0.024355207775538977,-0.023147569313240017,0.026597503649351026,-0.05364031747682782,0.006279863905696776,-0.014365172519345805,0.036390881952732844,0.012729222155634204,0.015906272949353484,-0.03214229025397846,7.312970357722304E-5,0.035320132995467095,-0.009109686454230824,9.476315856894109E-5,0.024779110067658348,-0.03636287510773552,0.019959042392831125,-0.003935879674487942,-0.035828775261026485,0.018213033534728428,-0.00795497282332765,10.74914277226557,0.05564746081364676,0.01620682380810074,0.007184367634680704,-0.040153312799457455,0.04740202471684626,0.0077802322487557675,-0.03538781122740441,-0.08097144219749425,0.01748874431254515,-0.026142966403026966,-0.005384871291889368,-0.021659813250829055,-0.029045341295099513,0.029742307260135416,0.02313797010819081,0.00695488624775685,-0.01659208057131984,0.03649500508147041,-0.016622181847569695,0.04412879498587276,-0.013148576754024695,-0.03833820589436766,0.05314218315678019,0.010069091456021181,0.010381669257585331,0.003678274592375201,0.01592314590588282,0.03051259456866589,-0.003976332340735961,-0.006890452280225859,0.06204827135108407,0.021006542258153224,0.023651255183231582,-0.0017664989041748951,0.05242709185532733,0.007271083334796853,-0.03828619180340979,0.030182622041522205,-0.022624435591233207,-0.03585660524737218,-0.026478359254065054,0.03160832750802768,-0.015798307249613907,9.548755555847098,0.01671987550555757,-0.030226162905372098,-0.02480454001062157,-11.876174333172461,8.154719484994924,-0.035386608927891375,-0.004582716290234065,0.06694634926544946,-4.0101435202846437E-4,-0.0219614132486178,0.009719512439295948,0.0010847498823476974,-0.03065795544645554,-0.03325487293157477,-0.013429580389942903,0.019028449911908062};

	static double[] evolveWeights() throws Exception
	{
		// Create a random initial population
		Random r = new Random();
		Matrix population = new Matrix(100, 291);
		for(int i = 0; i < 100; i++)
		{
			double[] chromosome = population.row(i);
			for(int j = 0; j < chromosome.length; j++)
				chromosome[j] = 0.03 * r.nextGaussian();
		}

		// long best_time = 1000000000;
		// double [] best_gene = population.row(r.nextInt(population.rows()));
		int win_numb = 0 ;
		for (int i =0; i<1000; i++)
		{
			if(i % 10 == 0)
			{
				//int winning_percent = (win_numb/i+1);
				//System.out.println(Integer.toString(i));
				//System.out.print(win_numb + " ");
				// Vec.toString(win_numb);
				//win_numb = 0 ;
			}
			// doing mutation
			for (int j =0; j < population.rows(); j++)
			{
				if(r.nextDouble() < mutation_rate)
				{
					int index = r.nextInt(291);
					population.row(j)[index] += r.nextGaussian() * avg_deviation;
				}
			}
			//Tournament
			int chal = r.nextInt(population.rows());
			//System.out.println("Chal is = " + chal );
			double[] gene_one = population.row(chal);

			int chal2 = r.nextInt(population.rows());
			//System.out.println("Chal is = " + chal2 );
			double[] gene_two = population.row(chal2);

			int result = Controller.doBattleNoGui(new NeuralAgent(gene_one),new NeuralAgent(gene_two));
			int final_round ;
			double[] winner;
			double[] looser;

			if(result < 0)
			{
				//
				winner = gene_two;
				looser = gene_one;
				//System.out.println("Yay I win ");

			}
			else
			{
				//final_round = Controller.doBattleNoGui(new ReflexAgent(), new NeuralAgent(gene_one));
				winner = gene_one;
				looser = gene_two;
			}

			final_round = Controller.doBattleNoGui(new ReflexAgent(), new NeuralAgent(winner));

			if(final_round < 0 )
			{
				win_numb++;
				//System.out.println(Vec.toString(winner));
			}

			if(final_round < 0 && r.nextDouble() < 0.62)
			{
				double[] father = population.row(r.nextInt(100));
				double[] mother = population.row(r.nextInt(100));
				for(int k =0; k < 291; k++)
				{
					looser[k] = (r.nextBoolean()? father[k] : mother[k]);
				}
			}
			else
			{
				double[] father = population.row(r.nextInt(100));
				double[] mother = population.row(r.nextInt(100));
				for(int k =0; k < 291; k++)
				{
					winner[k] = (r.nextBoolean() ? father[k] : mother[k]);
				}
			}
		}
		//System.out.println("No of winner in this gen = "  + win_numb );
		return population.row(0);
	}


	public static void main(String[] args) throws Exception
	{
		//double[] w = evolveWeights();
		// double[] w = evolveWeights();


		Controller.doBattle(new ReflexAgent(), new NeuralAgent(wi));
	}

}
